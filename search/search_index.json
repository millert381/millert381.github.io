{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Here is the collective sum of everything I know that I have stopped long enough to write about.</p>"},{"location":"ECS-MES/overview/","title":"Overview","text":"<p>ECS MES is a framework built within the Ignition SCADA platform. This framework provides a simple interface for configuring an equipment model and generating the necessary tags (UDTs) to collect real-time data, including equipment state, count, material, and related production settings. With this data, OEE and Downtime analysis functionality delivers data a variety purpose-built dashboards and reports.</p> <p>Key Features:</p> <ol> <li> <p>Equipment Modeling: Define your equipment model, including equipment hierarchies, equipment schedules, machine states, materials, etc.</p> </li> <li> <p>Real-time State Monitoring: Monitor equipment states in real-time, enabling proactive maintenance and reducing unplanned downtime. Receive instant alerts for any deviations from optimal operating conditions.</p> </li> <li> <p>Count Tracking: Precisely track production counts and cycle times. Identify bottlenecks and performance gaps to enhance production efficiency.</p> </li> <li> <p>Material Management: Manage materials with ease. Record material usage, consumption, and replenishment data, ensuring accurate inventory management and cost control.</p> </li> <li> <p>Material Production Settings: Fine-tune your production settings to optimize material usage and product quality. Easily adjust parameters to meet changing production requirements.</p> </li> </ol> <p>Benefits:</p> <ol> <li> <p>Downtime Reduction: ECS MES enables you to identify and address downtime causes promptly, reducing production interruptions and improving OEE.</p> </li> <li> <p>OEE Analysis: Gain deep insights into your equipment's availability, performance, and quality. Use data-driven analytics to make informed decisions and drive continuous improvement.</p> </li> <li> <p>Resource Optimization: Maximize equipment and labor resources with real-time monitoring and performance analysis. Allocate resources efficiently to meet production targets.</p> </li> <li> <p>Cost Savings: By reducing downtime, improving equipment efficiency, and optimizing material usage, you'll realize significant cost savings and increased profitability.</p> </li> <li> <p>Comprehensive Reporting: Generate detailed reports and dashboards for OEE analysis, downtime tracking, and material consumption. Easily share insights with stakeholders.</p> </li> </ol> <p>Use Cases:</p> <ul> <li> <p>Manufacturing: Enhance production efficiency, reduce downtime, and improve product quality with real-time OEE analysis and downtime tracking.</p> </li> <li> <p>Pharmaceuticals: Ensure precise material management and adherence to production settings in pharmaceutical manufacturing, where accuracy is paramount.</p> </li> <li> <p>Packaging: Optimize packaging lines, reduce material waste, and enhance line efficiency with precise count tracking and material management.</p> </li> <li> <p>Food and Beverage: Track material usage and production settings to maintain product consistency and reduce waste in the food and beverage sector.</p> </li> </ul> <p>Conclusion: Elevate your manufacturing operations to new heights with ECS MES. Our focus on equipment modeling, real-time data collection, and OEE analysis will empower your organization to achieve unprecedented levels of efficiency, quality, and profitability. Join industry leaders who are already reaping the benefits of ECS MES today!</p> <p>Don't miss the opportunity to transform your manufacturing processes. Contact us to schedule a demo and experience the power of ECS MES firsthand.</p>"},{"location":"ECS-MES/framework/data-analysis/","title":"Data analysis","text":"<p>Provide documentation</p>"},{"location":"ECS-MES/framework/data-collection/","title":"Data collection","text":"<p>Provide documentation</p>"},{"location":"ECS-MES/framework/equipment-modeling/","title":"Equipment modeling","text":"<p>Provide documentation</p>"},{"location":"ECS-MES/framework/dashboards-and-reports/dashboards/","title":"Dashboards","text":"<p>Provide documentation</p>"},{"location":"ECS-MES/framework/dashboards-and-reports/reports/","title":"Reports","text":"<p>Provide documentation</p>"},{"location":"ECS-MES/framework/module-development/build/","title":"OEE/Downtime Module - Build Notes","text":""},{"location":"ECS-MES/framework/module-development/build/#overview","title":"Overview","text":"<p>The source code for the project is located in Azure DevOps.</p>"},{"location":"ECS-MES/framework/module-development/build/#make-some-changes","title":"Make Some Changes","text":"<p>In the initial example, the getEquipment() function is defined under the EquipmentScriptModule class (located under  <code>ecs-oeedt-common</code>). Let's add a simple function:</p> <pre><code>public String doSomethingUseful() {\n        return \"Or not!\";\n}\n</code></pre> <p>That's it! We're ready to test it out! Build the module, install it, launcher the designer, open the Script Console and  try calling the function:</p> <pre><code>print system.ecs.equipment.doSomethingUseful()\n</code></pre>"},{"location":"ECS-MES/framework/module-development/build/#building-the-module","title":"Building the Module","text":"<p>Before you can install the module on the Gateway and test it from the Script Console in the Designer, you have to build the project and sign the module. (Technically, you could install an unsigned module, but that requires the Gateway to be running in Developer mode.)  Below are the steps to build the module and sign it:</p> <ol> <li>From IntelliJ, open the Maven Tool Window (View | Tool Windows | Maven).</li> <li>Inside the Maven Tool Window, click on the Execute Maven Goal button or press the Ctrl key twice.</li> <li>In the Run Anything window, type <code>clean install</code> and press Enter.</li> <li>IntelliJ IDEA runs the selected goal and displays the result in the Run tool window.</li> </ol>"},{"location":"ECS-MES/framework/module-development/build/#sign-the-module","title":"Sign the Module","text":"<p>To sign the module, we will use the Ignition Module Signer tool.  If you have not already done so, complete the steps outlined in the Module Signing section of the How-To: Ignition Module Development guide.</p> <p>Once you have the tool, switch to the directory where the tool resides: </p> <pre><code>cd C:\\development\\git\\module-signer\\target\n</code></pre> <p>Use the command below to create a signed version of the module:</p> <pre><code>```\njava ^\n    -jar module-signer-1.0.0-SNAPSHOT-jar-with-dependencies.jar ^\n    -keystore=C:\\development\\keystore\\keystore.jks ^\n    -keystore-pwd=Kotter16 -alias=selfsigned ^\n    -alias-pwd=Kotter16 ^\n    -chain=C:\\development\\keystore\\selfsigned.p7b ^\n    -module-in=C:\\Users\\todd.miller\\source\\repos\\ecs-mes\\ecs-mes-build\\target\\ecs-mes-unsigned.modl ^\n    -module-out=C:\\Users\\todd.miller\\source\\repos\\ecs-mes\\ecs-mes-build\\target\\ecs-mes-signed.modl\n```\n</code></pre> <p>Note the <code>^</code> character was added to allow multi-line pasting into the Windows Command Prompt.</p> <p>You may need to modify the command above based on: - Your keystore and self-signed certificate information. - The location of your local repository.</p>"},{"location":"How-To/ignition/ignition-module-development/","title":"Ignition Module Development","text":""},{"location":"How-To/ignition/ignition-module-development/#getting-started","title":"Getting Started","text":""},{"location":"How-To/ignition/ignition-module-development/#required-software","title":"Required Software","text":"<ul> <li>Java JDK (at least version 1.8)</li> <li>Ignition (at least version 7.8)</li> <li>Ignition SDK</li> <li>Maven</li> <li>Git for Windows</li> <li>KeyStore Explorer (optional)</li> </ul>"},{"location":"How-To/ignition/ignition-module-development/#environment-setup","title":"Environment Setup","text":"<p>For guidance setting up your development environment, refer to the Ignition SDK Programmer's Guide. Specifically, the following section.</p> <p>Follow the steps outlined in the How to get started section of the Environment Setup documentation.</p> <p>Below are a few tips from personal experience:</p> <ul> <li>Install latest Java JDK</li> <li>Download latest Maven and unzip</li> <li>Add the following \"\\bin\" folders for Java SDK and Maven to Environment Variable \"Path\" (based on where each was installed):<ul> <li>C:\\Program Files\\Java\\jdk1.8.0_112\\bin</li> <li>C:\\development\\apache-maven-3.3.9\\bin</li> </ul> </li> <li> <p>Run the following from command line to set JAVA_HOME to the root of the Java SDK folder:</p> <p><code>SET JAVA_HOME=C:\\Program Files\\Java\\jdk1.8.0_112</code></p> </li> </ul>"},{"location":"How-To/ignition/ignition-module-development/#module-signing","title":"Module Signing","text":""},{"location":"How-To/ignition/ignition-module-development/#generate-java-keystore","title":"Generate Java Keystore","text":"<ul> <li> <p>Switch to directory where keytool.exe is installed (JDK or JRE install location):</p> <p><code>cd C:\\Program Files\\Java\\jdk1.8.0_112\\bin</code></p> </li> <li> <p>Generate keystore and create a self-signed certificate in the keystore:</p> <p><code>keytool -genkey -keyalg RSA -alias selfsigned -keystore keystore.jks -storepass Kotter16 -validity 360 -keysize 2048</code></p> </li> <li> <p>Answer the prompts similar to the following:</p> <p>``` What is your first and last name?     [Unknown]:  PM7510F.ecseng.com What is the name of your organizational unit?     [Unknown]:  Ignition Development What is the name of your organization?     [Unknown]:  ECS Solutions What is the name of your City or Locality?     [Unknown]:  Evansville What is the name of your State or Province?     [Unknown]:  Indiana What is the two-letter country code for this unit?     [Unknown]:  US Is CN=PM7510F.ecseng.com, OU=Ignition Development, O=ECS Solutions, L=Evansville, ST=Indiana, C=US correct?     [no]:  yes</p> <p>Enter key password for  (RETURN if same as keystore password): <p>```</p> <li> <p>The \"keystore.jks\" file will be created in the same directory as the keytool.exe</p> <ul> <li>Note: I moved the file to \"C:\\development\\keystore\"</li> </ul> </li>"},{"location":"How-To/ignition/ignition-module-development/#export-the-self-signed-certificate-p7b","title":"Export the self-signed certificate (*.p7b)","text":"<ul> <li>Run KeyStore Explorer utility</li> <li>The following steps are based on the settings used in the command above to generate the Java Keystore:<ul> <li>Open the \"keystore.jks\" utility and enter the password.</li> <li>Right-click on the \"selfsigned\" certificate and click \"Export|Export Certificate Chain\"</li> <li>Use the following options:<ul> <li>Export Length: Entire Chain</li> <li>Export Format: PKCS #7</li> <li>PEM (default): True </li> <li>Export File (default): C:\\development\\keystore\\selfsigned.p7b<ul> <li>Note: This path will be used below when invoking the Ignition Module Signer tool</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"How-To/ignition/ignition-module-development/#self-sign-ignition-module","title":"Self-sign Ignition Module","text":"<ul> <li> <p>Get the Ignition Module Signer tool For guidance setting up your development environment, refer to the Ignition SDK Programmer's Guide. Specifically, the following section.</p> <ul> <li> <p>Switch to directory where the Ignition Module Signing Git repository should be cloned:</p> <p><code>cd c:\\development\\git</code></p> </li> <li> <p>Clone the Git repository (I used Git for Windows):</p> <p><code>git clone https://github.com/inductiveautomation/module-signer.git</code></p> </li> </ul> </li> <li> <p>Build the Ignition Module Signer tool using Eclipse</p> <ul> <li>Open the module-signer project in your IDE from the folder you cloned the project to in the step above.</li> <li>Clean, compile, install the project to generate the .jar file in the \"target\" folder of the project</li> </ul> </li> <li> <p>Invoke the Ignition Module Signer tool</p> <ul> <li> <p>Switch to the directory with the module-signer jar file:</p> <p><code>cd C:\\development\\git\\module-signer\\target</code></p> </li> </ul> </li> <li> <p>Sign your module using a command similar to one shown below. Note: This is the command used to build the DVR module, you will need to change the file paths and .modl file names based on your setup.</p> <p><code>java ^     -jar module-signer-1.0.0-SNAPSHOT-jar-with-dependencies.jar ^     -keystore=C:\\development\\keystore\\keystore.jks ^     -keystore-pwd=Kotter16 -alias=selfsigned ^     -alias-pwd=Kotter16 ^     -chain=C:\\development\\keystore\\selfsigned.p7b ^     -module-in=C:\\development\\ecs-solutions\\dvr-component\\dvr-build\\target\\DVR-unsigned.modl ^     -module-out=C:\\development\\ecs-solutions\\dvr-component\\dvr-build\\target\\DVR-signed.modl</code></p> </li> </ul>"},{"location":"How-To/microsoft/sql-server/how-to-fix-orphaned-users/","title":"How to fix orphaned users","text":""},{"location":"How-To/microsoft/sql-server/how-to-fix-orphaned-users/#how-to-fix-orphaned-sql-server-users","title":"How to fix orphaned SQL Server users","text":"<p>Source: How to fix orphaned SQL Server users Author: Unknown Publication Date: Unknown</p>"},{"location":"How-To/microsoft/sql-server/how-to-fix-orphaned-users/#summary","title":"Summary","text":"<p>When you restore a Microsoft SQL Server database on a different machine, you cannot access the database until you fix the permissions.</p>"},{"location":"How-To/microsoft/sql-server/how-to-fix-orphaned-users/#detail","title":"Detail","text":"<p>The problem is that the user in the database is an orphan. This means that there is no login id or password associated with the user. This is true even if there is a login id that matches the user, since there is a GUID (called a SID in Microsoft-speak) that has to match as well.</p> <p>This used to be a pain to fix, but currently (SQL Server 2000, SP3) there is a stored procedure that does the heavy lifting.</p> <p>All of these instructions should be done as a database admin, with the restored database selected.</p> <p>First, make sure that this is the problem. This will lists the orphaned users:</p> <pre><code>EXEC sp_change_users_login 'Report'\n</code></pre> <p>If you already have a login id and password for this user, fix it by doing:</p> <pre><code>EXEC sp_change_users_login 'Auto_Fix', 'user'\n</code></pre> <p>If you want to create a new login id and password for this user, fix it by doing:</p> <pre><code>EXEC sp_change_users_login 'Auto_Fix', 'user', 'login', 'password'\n</code></pre>"},{"location":"How-To/microsoft/sql-server/sql-server-cursor-example/","title":"Sql server cursor example","text":""},{"location":"How-To/microsoft/sql-server/sql-server-cursor-example/#sql-server-cursor-example","title":"SQL Server Cursor Example","text":"<p>Source: SQL Server Cursor Example Author: Jeremy Kadlec Publication Date: 2020-12-31 (last updated as of 2023-09-20)</p>"},{"location":"How-To/microsoft/sql-server/sql-server-cursor-example/#problem","title":"Problem","text":"<p>In my T-SQL code, I always use set based operations. I have been told these types of operations are what SQL Server is designed to process and it should be quicker than serial processing. I know cursors exist, but I am not sure how to use them. Can you provide some cursor examples? Can you give any guidance on when to use cursors? I assume Microsoft included them in SQL Server for a reason so they must have a place where they can be used in an efficient manner.</p>"},{"location":"How-To/microsoft/sql-server/sql-server-cursor-example/#solution","title":"Solution","text":"<p>In some circles, cursors are never used.  In others, they are a last resort. And in other groups they are used regularly. In each of these camps, they have different reasons for their stand on cursor usage. Regardless, they probably have a place in particular circumstances and not in others. It boils down to your understanding of the coding technique then your understanding of the problem at hand to make a decision on whether or not cursor-based processing is appropriate or not. To get started let's do the following:</p> <ul> <li>Look at an example cursor</li> <li>Break down the components of the cursor</li> <li>Provide additional cursor examples</li> <li>Analyze the pros and cons of cursor usage</li> </ul> <p>Let's first provide a SQL Server Cursor example then answer all of the pertinent questions.</p>"},{"location":"How-To/microsoft/sql-server/sql-server-cursor-example/#sql-server-cursor-example_1","title":"SQL Server Cursor Example","text":"<p>Here is an example SQL Server cursor from this tip Simple script to backup all SQL Server databases where backups are issued in a serial manner:</p> <pre><code>DECLARE @name VARCHAR(50) -- database name \nDECLARE @path VARCHAR(256) -- path for backup files \nDECLARE @fileName VARCHAR(256) -- filename for backup \nDECLARE @fileDate VARCHAR(20) -- used for file name \n\nSET @path = 'C:\\Backup\\' -- path to backup\n\nSELECT @fileDate = CONVERT(VARCHAR(20),GETDATE(),112) \n\nDECLARE db_cursor CURSOR FOR \nSELECT name \nFROM MASTER.dbo.sysdatabases \nWHERE name NOT IN ('master','model','msdb','tempdb') \n\nOPEN db_cursor  \nFETCH NEXT FROM db_cursor INTO @name  \n\nWHILE @@FETCH_STATUS = 0  \nBEGIN  \n      SET @fileName = @path + @name + '_' + @fileDate + '.BAK' \n      BACKUP DATABASE @name TO DISK = @fileName \n\n      FETCH NEXT FROM db_cursor INTO @name \nEND \n\nCLOSE db_cursor  \nDEALLOCATE db_cursor \n</code></pre>"},{"location":"How-To/microsoft/sql-server/sql-server-cursor-example/#what-is-a-sql-server-cursor","title":"What is a SQL Server Cursor","text":"<p>A SQL Server cursor is a set of T-SQL logic to loop over a predetermined number of rows one at a time.  The purpose for the cursor may be to update one row at a time or perform an administrative process such as SQL Server database backups in a sequential manner.  SQL Server cursors are used for Development, DBA and ETL processes.</p>"},{"location":"How-To/microsoft/sql-server/sql-server-cursor-example/#how-to-write-a-cursor-in-sql-server","title":"How to Write a Cursor in SQL Server","text":"<p>Creating a SQL Server cursor is a consistent process.  Once you learn the steps you are easily able to duplicate them with various sets of logic to loop through data. Let's walk through the steps:</p> <ol> <li>Declare your variables (file names, database names, account numbers, etc.) that you need in the logic and initialize the variables. This logic would be updated based on your needs.</li> <li>Declare cursor with a specific name (i.e. db_cursor in this tip) that you will use throughout the logic along with the business logic (SELECT statement) to populate the records the cursor will need. The cursor name can be anything meaningful.  This is immediately followed by opening the cursor. This logic would be updated based on your needs.</li> <li>Fetch a record from cursor to begin the data processing. NOTE - There are an equal of number of variables declared for the cursor, columns in the SELECT statement and variables in the Fetch logic.  In the example in this tip there is only one variable, one column selected and variable fetched, but if five pieces of data were needed for the cursor then five variables would need to be selected and fetched as well.</li> <li>The data process is unique to each set of logic. This could be inserting, updating, deleting, etc. for each row of data that was fetched. This is the most important set of logic during this process that is performed on each row.</li> <li>This logic would be updated based on your needs.</li> <li>Fetch the next record from cursor as you did in step 3 and then step 4 is repeated again by processing the selected data.</li> <li>Once all of the data has been processed, then you close cursor.</li> <li>As a final and important step, you need to deallocate the cursor to release all of the internal resources SQL Server is holding.</li> </ol> <p>From here, check out the examples below to get started on knowing when to use SQL Server cursors and how to do so.</p>"},{"location":"How-To/microsoft/sql-server/sql-server-cursor-example/#cursor-in-sql-server","title":"Cursor in SQL Server","text":"<p>Based on the code and explanations above, let's break down the SQL Server cursor example and notate which sections would need to be updated when using this code.</p> <pre><code>-- 1 - Declare Variables\n-- * UPDATE WITH YOUR SPECIFIC CODE HERE *\nDECLARE @name VARCHAR(50) -- database name \nDECLARE @path VARCHAR(256) -- path for backup files \nDECLARE @fileName VARCHAR(256) -- filename for backup \nDECLARE @fileDate VARCHAR(20) -- used for file name \n\n-- Initialize Variables\n-- * UPDATE WITH YOUR SPECIFIC CODE HERE *\nSET @path = 'C:\\Backup\\' \n\nSELECT @fileDate = CONVERT(VARCHAR(20),GETDATE(),112) \n\n-- 2 - Declare Cursor\nDECLARE db_cursor CURSOR FOR \n-- Populate the cursor with your logic\n-- * UPDATE WITH YOUR SPECIFIC CODE HERE *\nSELECT name \nFROM MASTER.dbo.sysdatabases \nWHERE name NOT IN ('master','model','msdb','tempdb') \n\n-- Open the Cursor\nOPEN db_cursor\n\n-- 3 - Fetch the next record from the cursor\nFETCH NEXT FROM db_cursor INTO @name  \n\n-- Set the status for the cursor\nWHILE @@FETCH_STATUS = 0  \n\nBEGIN  \n -- 4 - Begin the custom business logic\n -- * UPDATE WITH YOUR SPECIFIC CODE HERE *\n    SET @fileName = @path + @name + '_' + @fileDate + '.BAK' \n   BACKUP DATABASE @name TO DISK = @fileName \n\n -- 5 - Fetch the next record from the cursor\n  FETCH NEXT FROM db_cursor INTO @name \nEND \n\n-- 6 - Close the cursor\nCLOSE db_cursor  \n\n-- 7 - Deallocate the cursor\nDEALLOCATE db_cursor \n</code></pre>"},{"location":"How-To/microsoft/sql-server/sql-server-cursor-example/#explanation-of-cursor-syntax-in-sql-server","title":"Explanation of Cursor Syntax in SQL Server","text":"<p>Based on the example above, cursors include these components:</p> <ul> <li>DECLARE statements - Declare variables used in the code block</li> <li>SET\\SELECT statements - Initialize the variables to a specific value</li> <li>DECLARE CURSOR statement - Populate the cursor with values that will be evaluated</li> <li>NOTE - There are an equal number of variables in the DECLARE CURSOR FOR statement as there are in the SELECT statement.  This could be 1 or many variables and associated columns.</li> <li>OPEN statement - Open the cursor to begin data processing</li> <li>FETCH NEXT statements - Assign the specific values from the cursor to the variables to match the DECLARE CURSOR FOR and SELECT statement</li> <li>NOTE - This logic is used for the initial population before the WHILE statement and then again during each loop in the process as a portion of the WHILE statement</li> <li>WHILE statement - Condition to begin and continue data processing</li> <li>BEGIN...END statement - Start and end of the code block</li> <li>NOTE - Based on the data processing, multiple BEGIN...END statements can be used</li> <li>Data processing - In this example, this logic is to backup a database to a specific path and file name, but this could be just about any DML or administrative logic</li> <li>CLOSE statement - Releases the current data and associated locks, but permits the cursor to be re-opened</li> <li>DEALLOCATE statement - Destroys the cursor</li> </ul>"},{"location":"How-To/microsoft/sql-server/sql-server-cursor-example/#why-use-a-cursor-in-sql-server","title":"Why Use a Cursor in SQL Server","text":"<p>Although using an INSERT, UPDATE or DELETE statement to modify all of the applicable data in one transaction is generally the best way to work with data in SQL Server, a cursor may be needed for:</p> <ul> <li>Iterating over data one row at a time</li> <li>Completing a process in a serial manner such as SQL Server database backups</li> <li>Updating data across numerous tables for a specific account</li> <li>Correcting data with a predefined set of data as the input to the cursor</li> </ul>"},{"location":"How-To/microsoft/sql-server/sql-server-cursor-example/#addition-information","title":"Addition Information","text":"<p>For additional information, view the link to the original article at the top of this page.</p>"},{"location":"How-To/microsoft/sql-server/sql-server-pivot-and-unpivot-table-examples/","title":"Sql server pivot and unpivot table examples","text":""},{"location":"How-To/microsoft/sql-server/sql-server-pivot-and-unpivot-table-examples/#sql-server-pivot-and-unpivot-table-examples","title":"SQL SERVER \u2013 PIVOT and UNPIVOT Table Examples","text":"<p>Source: SQL SERVER \u2013 PIVOT and UNPIVOT Table Examples Author: Pinal Dave Publication Date: 2008-06-07</p> <p>I previously wrote two articles about PIVOT and UNPIVOT tables. I really enjoyed writing about them as it was interesting concept. One of the Jr. DBA at my organization asked me following question.</p> <p>\u201cIf we PIVOT any table and UNPIVOT that table do we get our original table?\u201d</p> <p>I really think this is good question. Answers is Yes, you can but not always. When we pivot the table we use aggregated functions. If due to use of this function if data is aggregated, it will be not possible to get original data back.</p> <p>Let me explain this issue demonstrating simple example.</p> <pre><code>USE AdventureWorks\nGO\n-- Creating a Test Table\nCREATE TABLE Product(Cust VARCHAR(25), Product VARCHAR(20), QTY INT)\nGO\n-- Inserting Data into Table\nINSERT INTO Product(Cust, Product, QTY)\nVALUES('KATE','VEG',2)\nINSERT INTO Product(Cust, Product, QTY)\nVALUES('KATE','SODA',6)\nINSERT INTO Product(Cust, Product, QTY)\nVALUES('KATE','MILK',1)\nINSERT INTO Product(Cust, Product, QTY)\nVALUES('KATE','BEER',12)\nINSERT INTO Product(Cust, Product, QTY)\nVALUES('FRED','MILK',3)\nINSERT INTO Product(Cust, Product, QTY)\nVALUES('FRED','BEER',24)\nINSERT INTO Product(Cust, Product, QTY)\nVALUES('KATE','VEG',3)\nGO\n-- Selecting and checking entires in table\nSELECT *\nFROM Product\nGO\n-- Pivot Table ordered by PRODUCT\nSELECT PRODUCT, FRED, KATE\nFROM (\nSELECT CUST, PRODUCT, QTY\nFROM Product) up\nPIVOT (SUM(QTY) FOR CUST IN (FRED, KATE)) AS pvt\nORDER BY PRODUCT\nGO\n-- Pivot Table ordered by CUST\nSELECT CUST, VEG, SODA, MILK, BEER, CHIPS\nFROM (\nSELECT CUST, PRODUCT, QTY\nFROM Product) up\nPIVOT (SUM(QTY) FOR PRODUCT IN (VEG, SODA, MILK, BEER, CHIPS)) AS pvt\nORDER BY CUST\nGO\n-- Unpivot Table ordered by CUST\nSELECT CUST, PRODUCT, QTY\nFROM\n(\nSELECT CUST, VEG, SODA, MILK, BEER, CHIPS\nFROM (\nSELECT CUST, PRODUCT, QTY\nFROM Product) up\nPIVOT\n( SUM(QTY) FOR PRODUCT IN (VEG, SODA, MILK, BEER, CHIPS)) AS pvt) p\nUNPIVOT\n(QTY FOR PRODUCT IN (VEG, SODA, MILK, BEER, CHIPS)\n) AS Unpvt\nGO\n-- Clean up database\nDROP TABLE Product\nGO\n</code></pre> <p>ResultSet:</p> <pre><code>-- Selecting and checking entires in table\nCust Product QTY\n------------------------- -------------------- -----------\nKATE VEG 2\nKATE SODA 6\nKATE MILK 1\nKATE BEER 12\nFRED MILK 3\nFRED BEER 24\nKATE VEG 3\n</code></pre> <pre><code>-- Pivot Table ordered by PRODUCT\nPRODUCT FRED KATE\n-------------------- ----------- -----------\nBEER 24 12\nMILK 3 1\nSODA NULL 6\nVEG NULL 5\n</code></pre> <pre><code>-- Pivot Table ordered by CUST\nCUST VEG SODA MILK BEER CHIPS\n------------------------- ----------- ----------- ----------- ----------- -----------\nFRED NULL NULL 3 24 NULL\nKATE 5 6 1 12 NULL\n</code></pre> <pre><code>-- Unpivot Table ordered by CUST\nCUST PRODUCT QTY\n------------------------- -------- -----------\nFRED MILK 3\nFRED BEER 24\nKATE VEG 5\nKATE SODA 6\nKATE MILK 1\nKATE BEER 12 12\n</code></pre> <p>You can see in above example where we are using the SUM aggregated functions. SUM adds up values based on column used in the sum function. In our example Kate and Veg has two entries. In our pivot example with order by Cust the values are summed up. Now when table goes under UNPIVOT operations it transforms the table which is already went under PIVOT operation.</p> <p>Looking at the final PIVOT \u2013 UNPIVOT table is little different from the original table and it contains the sum of the two records which we have observed in the PIVOT table. You can see that result which are displayed in red fonts are summed.</p> <p>This way we can get the original table back if aggregate functions was not applied on the data or data was in such form that aggregate function might have not made any difference.</p> <p>Reference : Pinal Dave (https://blog.sqlauthority.com), SQL SERVER \u2013 UNPIVOT Table Example, SQL SERVER \u2013 PIVOT Table Example</p>"},{"location":"How-To/microsoft/windows/server/reset-trial-terminal-license-on-windows/","title":"Reset trial terminal license on windows","text":"<p>While Windows installed with Terminal Server role it does work without License for 120 Days on trail license, where within 120 days if the License server is not Connected the server will stop accepting connection with below error and event ID</p> <p></p> <p>EventID: 1128 Source: TerminalServices-RemoteConnectionManager</p> <p>The RD Licensing grace period has expired and the service has not registered with a license server with installed licenses. A RD Licensing server is required for continuous operation. A Remote Desktop Session Host server can operate without a license server for 120 days after initial start up.</p> <p></p> <p>The official solution is to Activate the RDS/TS CAL License server and point the Server to License server with User/Device License and will be resolve the problem</p> <p>But if you want to reset the timer and again avail 120 days grace time  here is the solution</p> <p>The solution was to delete the REG_BINARY in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\RCM\\GracePeriod</code> Only leaving the default.</p> <p></p> <p>Note: you must take ownership and give admin users full control to be able to delete this key.</p> <p>After a reboot the server should be working again for another 120 Days.</p> <p>Here is the link to the original article.</p>"},{"location":"How-To/mkdocs/run-local-server/","title":"Run local server","text":"<p>To avoid conflicts between Python versions and their dependencies, it's a good practice to use virtual environments for your projects. Create a separate virtual environment for each project and choose the Python version for that environment.</p> <p>Here's how to run your local mkdocs server for testing:</p> <pre><code># Activate the virtual environment (Windows)\nmyenv\\Scripts\\activate\n\n# Change to directory where your mkdocs config (.yml) file is located\ncd \"G:\\My Drive\\mkdocs\\everything-in-one-place\"\n\n# Run command to start local server\nmkdocs serve\n</code></pre> <p>Now, open a browser to http://127.0.0.1:8000</p>"},{"location":"How-To/python/activate-virtual-environment/","title":"Activate virtual environment","text":""},{"location":"How-To/python/activate-virtual-environment/#virtual-env-for-python","title":"Virtual Env for Python","text":"<p>A Python virtual environment is a self-contained directory that encapsulates a specific Python interpreter and its associated libraries and packages. It allows you to create isolated environments for Python projects, ensuring that dependencies do not interfere with each other. It's considered good practice to use virtual environments for your projects. Here's a brief description of Python virtual environments:</p> <ol> <li> <p>Isolation: Virtual environments provide a way to isolate different Python projects from each other. This means that you can have one project with specific library versions and dependencies that won't conflict with another project's requirements.</p> </li> <li> <p>Dependency Management: You can install and manage project-specific dependencies within a virtual environment, making it easier to keep track of which packages are required for a particular project. This helps prevent version conflicts and keeps your system-wide Python installation clean.</p> </li> <li> <p>Version Compatibility: Virtual environments allow you to use different versions of Python for different projects. For example, you can have one project that uses Python 2.7 and another that uses Python 3.8, without conflicts.</p> </li> <li> <p>Easy Activation/Deactivation: You can easily activate or deactivate a virtual environment, which changes the Python interpreter and environment variables to work within the isolated environment. This is particularly useful when working on multiple projects simultaneously.</p> </li> <li> <p>Portability: Virtual environments can be created and used on different systems. This makes it easier to share projects with colleagues or deploy them to different environments without worrying about dependencies.</p> </li> </ol> <p>To create a virtual environment in Python, you can use tools like <code>virtualenv</code> or Python's built-in module called <code>venv</code>. Once created, you can activate the virtual environment to start working within it, and deactivate it when you're done.</p> <p>Here's a basic example of creating and activating a virtual environment using <code>venv</code>:</p> <pre><code># Create a virtual environment\npython -m venv myenv\n\n# Activate the virtual environment (on Windows)\nmyenv\\Scripts\\activate\n\n# Activate the virtual environment (on macOS and Linux)\nsource myenv/bin/activate\n</code></pre> <p>Once activated, you can install packages using <code>pip</code>, and they will be installed only within the virtual environment, keeping your project's dependencies isolated. To deactivate the environment and return to the system-wide Python, you can simply run <code>deactivate</code> in the command prompt.</p>"},{"location":"How-To/python/activate-virtual-environment/#practical-example","title":"Practical Example","text":"<p>On my machine, I have Python 2.7 and Python 3.7 installed. Initially, I was trying to install <code>mkdocs</code> and the <code>mkdocs-material</code> theme.  However, I was running into errors installing the packages required for the theme. The issue was related to the version of <code>pip</code> that was being used during the install. By creating a virtual environment for my mkdocs documentation project, I was able to avoid conflicts between the Python versions.</p> <p>Here's how to create and activate a virtual environment using Python 3:</p> <pre><code># Create a virtual environment for Python 3.7\npython3 -m venv myenv\n\n# Activate the virtual environment (Linux/Mac)\nsource myenv/bin/activate\n\n# Activate the virtual environment (Windows)\nmyenv\\Scripts\\activate\n</code></pre> <p>Now, you're in a virtual environment that uses Python 3. You can use <code>pip</code> and <code>python</code> without specifying versions, and they will refer to the Python version within the virtual environment.</p> <p>Install your project's dependencies within this virtual environment:</p> <pre><code>pip install mkdocs mkdocs-material\n</code></pre> <p>When you're done working on the project, deactivate the virtual environment:</p> <pre><code>deactivate\n</code></pre> <p>Using virtual environments helps keep your project dependencies isolated, making it easier to manage multiple Python versions and packages for different projects.</p>"}]}